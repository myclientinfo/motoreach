<?php/*** * @package auction* * These classes are a complete auction framework, ready to implement using a minimum amount of procedural PHP code, * and a templating system like Smarty. The database abstraction layer AdoDB is used.* @version $Id: login.php,v 1.4 2005/07/28 04:02:29 woostachris Exp $* @copyright 2005*//*** Copyright (C) 2005 Vickie Comrie, Nicolas Connault, Christopher Vance* * Vickie Comrie: <vrcomrie@myway.com>* Nicolas Connault: <nicou@sweetpeadesigns.com.au>* Christopher Vance: <christopher.vance@gmail.com>* * This program is free software; you can redistribute it and/or* modify it under the terms of the GNU General Public License* as published by the Free Software Foundation; either version 2* of the License, or (at your option) any later version.* * This program is distributed in the hope that it will be useful,* but WITHOUT ANY WARRANTY; without even the implied warranty of* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the* GNU General Public License for more details.* * You should have received a copy of the GNU General Public License* along with this program; if not, write to the Free Software* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.*//*** The user uses this page to login as an existing user*/ require_once 'include.php';$main_content = new Template('login');// If the user is already logged in, we reset the session and let him log in again, to prevent security risks// In effect, this means that reaching this page logs the user out and asks him to re-log.//$_SESSION['authorised'] = "invalid";$auction = new Auction();$message = "";// If form data has been sent, retrieve user from databaseif(isset($_POST['login_email'])){	$user = new User(array());	$result = $user->getUser($_POST['login_email'], $_POST['login_password']);    	$user->getID();	    if($result === true){    			$_SESSION['authorised'] = "valid";		User::setCookie($user);        $auction->addUser($user);        $_SESSION['auction'] = $auction;        $_SESSION['auction']->user = $user;        User::loadUserPermissions();		User::loadGroupPreferred();		if(isset($_REQUEST['loc']) && $_REQUEST['loc']!='') header('location: '.base64_decode($_REQUEST['loc']));		else header('location: /user/');		    }else{		$_SESSION['authorised'] = "invalid";		$main_content->set('error_field', $result['field']);		$message = 'Your login has not been successful. Please check your email and password.';    }} else if(isset($_POST['password_reset_email'])){		$user = User::getUserFromEmail($_POST['password_reset_email']);		if(!empty($user)){		$msg = new Message();				$message_data = $msg->getMessageData(14, $user['ID']);		$msg->sendMessage(0, $message_data, true);	} else {		$message = 'No matching user found';	}} else if(isset($_POST['reset'])){		if(User::checkUserAuth()){		if($_POST['password']==$_POST['confirm_password']){			User::resetPassword($_GET['userID'], $_POST['password']);			$message = 'SUCCESS';			@header('location: /login.php');		} else {			$message = 'Your password and confirmation password do not match. Please try again.';		}	} else {		$message = 'Your reset request does not seem to be valid. Please request to reset again.';		$main_content->set('auth_invalid', '1');	}}if(isset($_GET['log_out']) && empty($_POST)){	//session_start();	$_SESSION['authorised'] = "invalid";	User::setCookie(false, true);	unset($_SESSION['auction']->user);	unset($_SESSION['auction']);		$_SESSION = array();		header('location: /login.php');}if(isset($_REQUEST['action']) && $_REQUEST['action'] == 'reset2'){		//User::resetPassword($user_id, $new_password);}//$main_content->set('message', $message);$template->set('content', $main_content->fetch());echo $template->fetch();?>